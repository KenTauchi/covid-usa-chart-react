{"version":3,"sources":["components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","console","log","this","props","chartData","className","data","Component","stateArr","casesArr","colorArr","App","state","labels","datasets","label","backgroundColor","fetch","process","then","response","json","caseData","map","push","case","legendPosition","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kTAoBeA,E,uKARX,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,WAErB,yBAAKC,UAAU,SACb,kBAAC,MAAD,CAAKC,KAAMJ,KAAKC,MAAMC,iB,GATVG,aCAhBC,EAAW,GACXC,EAAW,GACXC,EAAW,GAuDAC,E,4MAlDbC,MAAQ,CACNR,UAAW,CACTS,OAAQL,EACRM,SAAU,CACR,CACEC,MAAO,wCACPT,KAAMG,EACNO,gBAAiBN,M,kEAOvBO,MAAM,8CAAD,OAjBKC,yBAkBPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLA,EAASC,KAAI,SAACjB,GACZG,EAASe,KAAKlB,EAAKmB,MACnBjB,EAASgB,KAAKlB,EAAKM,OACfN,EAAKmB,KAAO,IACdf,EAASc,KAAK,2BACLlB,EAAKmB,MAAQ,KAAUnB,EAAKmB,KAAO,IAC5Cf,EAASc,KAAK,2BACLlB,EAAKmB,MAAQ,KAAUnB,EAAKmB,KAAO,IAC5Cf,EAASc,KAAK,4BACLlB,EAAKmB,MAAQ,KACtBf,EAASc,KAAK,mC,2CAOtBxB,QAAQC,IAAI,yB,+BAIZ,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,CACEqB,eAAe,SACftB,UAAWF,KAAKU,MAAMR,UACtBW,MAAM,c,GA5CER,aCCEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.1a4e391f.chunk.js","sourcesContent":["import { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\n\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\n\nclass Chart extends Component {\n  // state = {\n  //   chartData: this.props.chartData,\n  // };\n\n  render() {\n    console.log(this.props.chartData);\n    return (\n      <div className=\"chart\">\n        <Bar data={this.props.chartData} />\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Chart from \"./components/Chart/Chart\";\n\nlet stateArr = [];\nlet casesArr = [];\nlet colorArr = [];\n\nconst mykey = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  state = {\n    chartData: {\n      labels: stateArr,\n      datasets: [\n        {\n          label: \"n/b of total cases in the US by state\",\n          data: casesArr,\n          backgroundColor: colorArr,\n        },\n      ],\n    },\n  };\n\n  componentDidMount() {\n    fetch(`https://finnhub.io/api/v1/covid19/us?token=${mykey}`)\n      .then((response) => response.json())\n      .then((caseData) => {\n        caseData.map((data) => {\n          casesArr.push(data.case);\n          stateArr.push(data.state);\n          if (data.case < 100000) {\n            colorArr.push(\"rgba(54, 162, 235, 0.6)\");\n          } else if (data.case >= 100000 && data.case < 200000) {\n            colorArr.push(\"rgba(255, 206, 86, 0.6)\");\n          } else if (data.case >= 200000 && data.case < 300000) {\n            colorArr.push(\"rgba(153, 102, 255, 0.6)\");\n          } else if (data.case >= 300000) {\n            colorArr.push(\"rgba(255, 99, 132, 0.6)\");\n          }\n        });\n      });\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentDidUpdate!\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart\n          legendPosition=\"bottom\"\n          chartData={this.state.chartData}\n          label=\"true\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}